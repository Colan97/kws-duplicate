# -*- coding: utf-8 -*-
"""Duplicate Keywords Grouping Tool

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dTTeH9gmTOxujcmcLME-yHTGDstkZ3zU
"""

import pandas as pd
import re
from difflib import SequenceMatcher
from collections import defaultdict
import nltk
from nltk.stem import PorterStemmer

try:
    nltk.data.find('corpora/wordnet')
except LookupError:
    nltk.download('wordnet')
try:
    nltk.data.find('corpora/omw-1.4')
except LookupError:
    nltk.download('omw-1.4')

def normalize_keyword(keyword):
    """Normalize keyword by removing common variations"""
    keyword = keyword.lower().strip()
    keyword = re.sub(r's\b', '', keyword)
    keyword = re.sub(r'\b(for|the|a|an)\b', '', keyword)
    keyword = re.sub(r'\s+', ' ', keyword).strip()
    return keyword

def keyword_similarity(kw1, kw2):
    """Calculate similarity between two keywords (less important now with Jaccard)"""
    norm_kw1 = normalize_keyword(kw1)
    norm_kw2 = normalize_keyword(kw2)

    if norm_kw1 == norm_kw2:
        return 1.0

    words1 = set(norm_kw1.split())
    words2 = set(norm_kw2.split())
    if words1.issubset(words2) or words2.issubset(words1):
        return 0.9

    return SequenceMatcher(None, norm_kw1, norm_kw2).ratio()

def process_keywords(keywords, similarity_threshold=0.85):
    """Group similar keywords together (Corrected for duplicates)"""
    keywords = [kw.strip() for kw in keywords if kw.strip()]
    groups = defaultdict(list)
    group_counter = 1
    stemmer = PorterStemmer()
    assigned_keywords = set()  # Keep track of assigned keywords

    for kw in keywords:
        if kw in assigned_keywords:  # Skip already assigned keywords
            continue

        normalized_kw = normalize_keyword(kw)
        stemmed_words = {stemmer.stem(word) for word in normalized_kw.split()}

        assigned = False
        for group_id, group_kws in groups.items():
            for group_kw in group_kws:
                normalized_group_kw = normalize_keyword(group_kw)
                stemmed_group_words = {stemmer.stem(word) for word in normalized_group_kw.split()}
                intersection = len(stemmed_words.intersection(stemmed_group_words))
                union = len(stemmed_words.union(stemmed_group_words))
                similarity = intersection / union if union else 0.0

                if similarity >= similarity_threshold:
                    groups[group_id].append(kw)
                    assigned_keywords.add(kw)  # Mark as assigned
                    assigned = True
                    break
            if assigned:
                break

        if not assigned:
            groups[group_counter].append(kw)
            assigned_keywords.add(kw)  # Mark as assigned
            group_counter += 1

    return groups

def get_user_input():
    """Get input method and keywords from user"""
    print("\n=== Keyword Grouping Tool ===")
    print("\nHow would you like to input keywords?")
    print("1. Paste a list of keywords")
    print("2. Upload a file")
    print("3. Enter keywords one by one")

    while True:
        choice = input("\nEnter your choice (1, 2, or 3): ").strip()
        if choice in ['1', '2', '3']:
            break
        print("Invalid choice. Please enter 1, 2, or 3.")

    keywords = []

    if choice == '1':
        print("\nPaste your keywords below (press Enter twice when done):")
        lines = []
        while True:
            line = input()
            if line == '':
                break
            lines.append(line)
        text = ' '.join(lines)
        keywords.extend([k.strip() for k in text.split(',') if k.strip()])

    elif choice == '2':
        file_path = input("\nEnter the path to your keywords file: ").strip()
        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                keywords = [line.strip() for line in file if line.strip()]
        except FileNotFoundError:
            print(f"Error: File '{file_path}' not found.")
            return None

    else:  # choice == '3'
        print("\nEnter keywords one by one (press Enter without typing to finish):")
        while True:
            keyword = input().strip()
            if keyword == '':
                break
            keywords.append(keyword)

    return keywords

def get_similarity_threshold():
    """Get similarity threshold from user"""
    print("\nSet the similarity threshold for grouping keywords:")
    print("Higher value (e.g., 0.90) = stricter matching, fewer groups")
    print("Lower value (e.g., 0.80) = more lenient matching, more groups")

    while True:
        try:
            threshold = float(input("\nEnter threshold (0.70 to 0.95) [default 0.85]: ") or "0.85")
            if 0.70 <= threshold <= 0.95:
                return threshold
            print("Please enter a value between 0.70 and 0.95")
        except ValueError:
            print("Please enter a valid number")

def get_output_preference():
    """Get output file name preference from user"""
    while True:
        save_choice = input("\nWould you like to save results to a CSV file? (y/n): ").lower()
        if save_choice in ['y', 'n']:
            break
        print("Please enter 'y' or 'n'")

    if save_choice == 'y':
        filename = input("Enter filename (default: keyword_groups.csv): ").strip() or "keyword_groups.csv"
        return filename
    return None

def main():
    # Get keywords from user
    keywords = get_user_input()
    if not keywords:
        print("\nNo keywords provided. Exiting.")
        return

    # Get similarity threshold
    threshold = get_similarity_threshold()

    # Process keywords
    groups = process_keywords(keywords, threshold)

    # Create DataFrame
    rows = []
    for group_id, group_keywords in groups.items():
        for kw in group_keywords:
            rows.append({'Group': group_id, 'Keyword': kw})

    df = pd.DataFrame(rows)

    # Sort by Group and Keyword
    df = df.sort_values(['Group', 'Keyword'])

    # Display results
    print("\nKeywords with Group Numbers:")
    print("-" * 40)
    for _, row in df.iterrows():
        print(f"{row['Group']}. {row['Keyword']}")

    # Save to file if requested
    filename = get_output_preference()
    if filename:
        df.to_csv(filename, index=False)
        print(f"\nResults have been saved to '{filename}'")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nProcess interrupted by user. Exiting.")
    except Exception as e:
        print(f"\nAn error occurred: {str(e)}")
    finally:
        print("\nThank you for using the Keyword Grouping Tool!")